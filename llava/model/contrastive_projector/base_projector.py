import torch.nn as nn
import torch.nn.functional as F
import re
import torch
import math
import warnings

from transformers import AutoConfig, AutoModel, PretrainedConfig, PreTrainedModel
from llava.utils import rank0_breakpoint

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

        
class ContrastiveProjectorConfig(PretrainedConfig):
    model_type = "vl_contrastive_projector"

    def __init__(self, config: PretrainedConfig = None, **kwargs):
        super().__init__(**kwargs)
        if config is not None:
            self.in_hidden_size = config.hidden_size  # llm's output hidden size
            self.out_hidden_size = config.mm_hidden_size  # vision tower's output hidden size, follow LM4VisualEncoding (ICLR'24)
            self.model_dtype = config.torch_dtype


class ContrastiveProjector(PreTrainedModel):
    config_class = ContrastiveProjectorConfig

    def __init__(
        self, config: PretrainedConfig
    ):
        super().__init__(config)
        self.config = config
        self.norm = nn.LayerNorm(config.in_hidden_size)  # TODO: change to RMSNorm
        self.ffn = nn.Linear(config.in_hidden_size, config.out_hidden_size)  
        self.apply(self._init_weights)
    
    # def _trunc_normal_(tensor, mean, std, a, b):
    #     # rewrite timm trunc normal
    #     def norm_cdf(x):
    #         # Computes standard normal cumulative distribution function
    #         return (1. + math.erf(x / math.sqrt(2.))) / 2.

    #     if (mean < a - 2 * std) or (mean > b + 2 * std):
    #         warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
    #                     "The distribution of values may be incorrect.",
    #                     stacklevel=2)

    #     l = norm_cdf((a - mean) / std)
    #     u = norm_cdf((b - mean) / std)

    #     # Uniformly fill tensor with values from [l, u], then translate to
    #     # [2l-1, 2u-1].
    #     tensor.uniform_(2 * l - 1, 2 * u - 1)

    #     # Use inverse cdf transform for normal distribution to get truncated standard normal
    #     # tensor.erfinv_() # NOTE: deleted as "erfinv_cuda" not implemented for 'BFloat16'

    #     # Transform to proper mean, std
    #     tensor.mul_(std * math.sqrt(2.))
    #     tensor.add_(mean)

    #     # Clamp to ensure it's in the proper range
    #     tensor.clamp_(min=a, max=b)
    #     return tensor

    def _init_weights(self, module):
        """Initialize the weights"""
        if isinstance(module, nn.Conv2d) or isinstance(module, nn.Embedding) or isinstance(module, nn.Linear):
            module.weight.data.normal_(mean=0.0, std=0.02)
            if hasattr(module, "bias") and module.bias is not None:
                module.bias.data.zero_()
        if isinstance(module, nn.LayerNorm):
            module.bias.data.zero_()
            module.weight.data.fill_(1.0)
        elif isinstance(module, nn.Linear) and module.bias is not None:
            module.bias.data.zero_()

    # def load_pretrained_weights(self, pretrained_model_name_or_path):
    #     # 載入預訓練模型至 CPU
    #     pretrained_model = Qwen2Model.from_pretrained(pretrained_model_name_or_path, device_map='cpu')

    #     # 提取嵌入層和 RMSNorm 層的權重
    #     pretrained_embeddings = pretrained_model.get_input_embeddings().state_dict()
    #     pretrained_norm = pretrained_model.norm.state_dict()

    #     # 將權重載入到當前模型的對應層
    #     self.embedding.load_state_dict(pretrained_embeddings)
    #     self.norm.load_state_dict(pretrained_norm)

    #     # 刪除預訓練模型以釋放記憶體
    #     del pretrained_model
    #     torch.cuda.empty_cache()
        
    def forward(self, x, *args, **kwargs):
        x = self.norm(x)
        output = self.ffn(x)
        return output


AutoConfig.register("vl_contrastive_projector", ContrastiveProjectorConfig)
AutoModel.register(ContrastiveProjectorConfig, ContrastiveProjector)


if __name__ == "__main__":
    config = ContrastiveProjectorConfig()
    model = ContrastiveProjector(config)
    print(model)